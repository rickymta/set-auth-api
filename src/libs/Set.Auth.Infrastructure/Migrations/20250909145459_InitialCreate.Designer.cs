// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Set.Auth.Infrastructure.Data;

#nullable disable

namespace Set.Auth.Infrastructure.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20250909145459_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Set.Auth.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Resource", "Action")
                        .IsUnique();

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e59639f-c759-450e-9092-88d0530d6cd9"),
                            Action = "read",
                            CreatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9121),
                            Description = "Permission to read users",
                            IsActive = true,
                            Name = "users.read",
                            Resource = "users",
                            UpdatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9121)
                        },
                        new
                        {
                            Id = new Guid("3c0d6b7f-f303-416c-ad14-dd88035db7ff"),
                            Action = "write",
                            CreatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9123),
                            Description = "Permission to write users",
                            IsActive = true,
                            Name = "users.write",
                            Resource = "users",
                            UpdatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9124)
                        },
                        new
                        {
                            Id = new Guid("87c0e273-796d-4c52-a27d-a803883a8c79"),
                            Action = "delete",
                            CreatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9125),
                            Description = "Permission to delete users",
                            IsActive = true,
                            Name = "users.delete",
                            Resource = "users",
                            UpdatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9125)
                        },
                        new
                        {
                            Id = new Guid("c19fc3bf-6204-492a-bf61-5434d627d3f2"),
                            Action = "read",
                            CreatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9127),
                            Description = "Permission to read roles",
                            IsActive = true,
                            Name = "roles.read",
                            Resource = "roles",
                            UpdatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9127)
                        },
                        new
                        {
                            Id = new Guid("e2861b35-bb82-4896-b7ce-9cad6bb42b6b"),
                            Action = "write",
                            CreatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9128),
                            Description = "Permission to write roles",
                            IsActive = true,
                            Name = "roles.write",
                            Resource = "roles",
                            UpdatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9128)
                        },
                        new
                        {
                            Id = new Guid("a845595e-b1b8-4f35-9d6e-777e6000aee0"),
                            Action = "delete",
                            CreatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9129),
                            Description = "Permission to delete roles",
                            IsActive = true,
                            Name = "roles.delete",
                            Resource = "roles",
                            UpdatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9129)
                        },
                        new
                        {
                            Id = new Guid("bdb6b201-eccd-4456-a431-99c18710e693"),
                            Action = "read",
                            CreatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9131),
                            Description = "Permission to read profile",
                            IsActive = true,
                            Name = "profile.read",
                            Resource = "profile",
                            UpdatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9131)
                        },
                        new
                        {
                            Id = new Guid("4d67791a-14aa-4590-910d-88593fe908f4"),
                            Action = "write",
                            CreatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9132),
                            Description = "Permission to write profile",
                            IsActive = true,
                            Name = "profile.write",
                            Resource = "profile",
                            UpdatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9132)
                        });
                });

            modelBuilder.Entity("Set.Auth.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId", "DeviceId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Set.Auth.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96c0426c-7e36-4689-bf65-2c51a9bf2314"),
                            CreatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(8949),
                            Description = "Administrator role with full access",
                            IsActive = true,
                            Name = "Admin",
                            UpdatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(8951)
                        },
                        new
                        {
                            Id = new Guid("5ee80dca-027d-448d-805c-cb9aa3ce7fc6"),
                            CreatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(8953),
                            Description = "Standard user role",
                            IsActive = true,
                            Name = "User",
                            UpdatedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(8953)
                        });
                });

            modelBuilder.Entity("Set.Auth.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("96c0426c-7e36-4689-bf65-2c51a9bf2314"),
                            PermissionId = new Guid("0e59639f-c759-450e-9092-88d0530d6cd9"),
                            GrantedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9167),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = new Guid("96c0426c-7e36-4689-bf65-2c51a9bf2314"),
                            PermissionId = new Guid("3c0d6b7f-f303-416c-ad14-dd88035db7ff"),
                            GrantedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9169),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = new Guid("96c0426c-7e36-4689-bf65-2c51a9bf2314"),
                            PermissionId = new Guid("87c0e273-796d-4c52-a27d-a803883a8c79"),
                            GrantedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9170),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = new Guid("96c0426c-7e36-4689-bf65-2c51a9bf2314"),
                            PermissionId = new Guid("c19fc3bf-6204-492a-bf61-5434d627d3f2"),
                            GrantedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9170),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = new Guid("96c0426c-7e36-4689-bf65-2c51a9bf2314"),
                            PermissionId = new Guid("e2861b35-bb82-4896-b7ce-9cad6bb42b6b"),
                            GrantedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9170),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = new Guid("96c0426c-7e36-4689-bf65-2c51a9bf2314"),
                            PermissionId = new Guid("a845595e-b1b8-4f35-9d6e-777e6000aee0"),
                            GrantedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9171),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = new Guid("96c0426c-7e36-4689-bf65-2c51a9bf2314"),
                            PermissionId = new Guid("bdb6b201-eccd-4456-a431-99c18710e693"),
                            GrantedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9171),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = new Guid("96c0426c-7e36-4689-bf65-2c51a9bf2314"),
                            PermissionId = new Guid("4d67791a-14aa-4590-910d-88593fe908f4"),
                            GrantedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9172),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = new Guid("5ee80dca-027d-448d-805c-cb9aa3ce7fc6"),
                            PermissionId = new Guid("bdb6b201-eccd-4456-a431-99c18710e693"),
                            GrantedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9220),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = new Guid("5ee80dca-027d-448d-805c-cb9aa3ce7fc6"),
                            PermissionId = new Guid("4d67791a-14aa-4590-910d-88593fe908f4"),
                            GrantedAt = new DateTime(2025, 9, 9, 14, 54, 58, 629, DateTimeKind.Utc).AddTicks(9221),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Set.Auth.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPhoneVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Set.Auth.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Set.Auth.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Set.Auth.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Set.Auth.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("Set.Auth.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Set.Auth.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Set.Auth.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Set.Auth.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Set.Auth.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Set.Auth.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Set.Auth.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Set.Auth.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
